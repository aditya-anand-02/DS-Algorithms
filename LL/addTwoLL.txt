class Solution
{
    public:
    struct Node* reverseList(struct Node* &head)
    {
        // code here
        // return head of reversed list
        if(head==NULL)
        {
            return head;
        }
        Node *prev=NULL;
        Node *curr=head;
        Node *fwd=NULL;
        while(curr!=NULL)
        {
            fwd=curr->next;
            curr->next=prev;
            prev=curr;
            curr=fwd;
        }
        return prev;
    }
    //Function to add two numbers represented by linked list.
    void insertAtTail(int data, struct Node* &head, struct Node* &tail )
    {
        Node *temp=new Node(data);
        if(head == NULL)
        {
            head=temp;
            tail=head;
        }
        else
        {
        tail->next=temp;
        tail=temp;
        }
        return;
    }
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        Node* head=NULL;
        Node* tail=NULL;
        Node *temp1=reverseList(first);
        Node *temp2=reverseList(second);
        int sum;
        int add;
        int carry=0;
        while(temp1!=NULL && temp2!=NULL)
        {
            add=temp1->data+temp2->data+carry;
            sum=add%10;
            carry=add/10;
            insertAtTail(sum,head,tail);
            temp1=temp1->next;
            temp2=temp2->next;
        }
        while(temp1!=NULL)
        {
            add=temp1->data+carry;
            sum=add%10;
            carry=add/10;
            insertAtTail(sum,head,tail);
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            add=temp2->data+carry;
            sum=add%10;
            carry=add/10;
            insertAtTail(sum,head,tail);
            temp2=temp2->next;
        }
        if(carry!=0)
        {
            insertAtTail(carry,head,tail);
        }
        Node *res=reverseList(head);
        return res;
        
    }
};